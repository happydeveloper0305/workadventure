version: "3.6"
services:
    reverse-proxy:
        image: traefik:v2.8
        expose:
            - "8080"
        ports:
            - "80:80"
        command:
            - --api.insecure=true
            - --providers.docker
            - --entryPoints.web.address=:80
            - --providers.docker.exposedbydefault=false
        labels:
            - "traefik.enable=true"
            - "traefik.port=8080"
            - "traefik.http.routers.traefik.rule=Host(`traefik.workadventure.localhost`)"
            - "traefik.http.routers.traefik.service=api@internal"
        depends_on:
            - back
            - play
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            default:
                aliases:
                    - 'front.workadventure.localhost'
                    - 'play.workadventure.localhost'
                    - 'maps.workadventure.localhost'
                    - 'oidc.workadventure.localhost'
                    - 'map-storage.workadventure.localhost'

    play:
        image: thecodingmachine/nodejs:v2-18-bullseye
        command: yarn run dev
        volumes:
            - ./play:/usr/src/app
            - ./libs:/usr/src/libs
        ports:
            - "9231:9229"
        environment:
        # On startup, we ask the messages container to regenerate the files.
            # Note: we need to use this "messages" container because of ARM64 processors that are not supported with protoc (used in "messages" container)
            STARTUP_COMMAND_0: touch /usr/src/app/src/messages/generate_request/need_regenerate
            STARTUP_COMMAND_1: yarn install
            STARTUP_COMMAND_2: yarn typesafe-i18n
            STARTUP_COMMAND_3: cd ../libs/tailwind && yarn install
            STARTUP_COMMAND_4: cd ../map-editor && yarn install
            DEBUG: "socket:*"
            DEBUG_ERROR_MESSAGES: "true"
            DEBUG_MODE: "$DEBUG_MODE"
            JITSI_URL: $JITSI_URL
            JITSI_PRIVATE_MODE: "$JITSI_PRIVATE_MODE"
            ENABLE_FEATURE_MAP_EDITOR: "$ENABLE_FEATURE_MAP_EDITOR"
            HOST: "0.0.0.0"
            NODE_ENV: development
            SERVER_ID: "$SERVER_ID"
            PLAY_URL: "http://play.workadventure.localhost"
            VITE_URL: "http://front.workadventure.localhost"
            PUSHER_URL: http://play.workadventure.localhost
            UPLOADER_URL: http://uploader.workadventure.localhost
            ICON_URL: http://icon.workadventure.localhost
            STUN_SERVER: "stun:stun.l.google.com:19302"
            TURN_SERVER: "turn:coturn.workadventure.localhost:3478,turns:coturn.workadventure.localhost:5349"
            DISABLE_NOTIFICATIONS: "$DISABLE_NOTIFICATIONS"
            SKIP_RENDER_OPTIMIZATIONS: "$SKIP_RENDER_OPTIMIZATIONS"
            # Use TURN_USER/TURN_PASSWORD if your Coturn server is secured via hard coded credentials.
            # Advice: you should instead use Coturn REST API along the TURN_STATIC_AUTH_SECRET in the Back container
            TURN_USER: ""
            TURN_PASSWORD: ""
            MAX_PER_GROUP: "$MAX_PER_GROUP"
            MAX_USERNAME_LENGTH: "$MAX_USERNAME_LENGTH"
            # Note: ENABLE_OPENID needs to have any not falsy value to be enabled.
            ENABLE_OPENID: "$OPID_CLIENT_ID"
            OPID_CLIENT_ID: $OPID_CLIENT_ID
            OPID_CLIENT_SECRET: $OPID_CLIENT_SECRET
            OPID_CLIENT_ISSUER: $OPID_CLIENT_ISSUER
            OPID_CLIENT_REDIRECT_URL: $OPID_CLIENT_REDIRECT_URL
            OPID_PROFILE_SCREEN_PROVIDER: $OPID_PROFILE_SCREEN_PROVIDER
            OPID_SCOPE: $OPID_SCOPE
            OPID_PROMPT: $OPID_PROMPT
            OPID_USERNAME_CLAIM: $OPID_USERNAME_CLAIM
            OPID_LOCALE_CLAIM: $OPID_LOCALE_CLAIM
            CHAT_URL: http://chat.workadventure.localhost
            SECRET_KEY: yourSecretKey
            ADMIN_API_TOKEN: "$ADMIN_API_TOKEN"
            API_URL: back:50051
            DISABLE_ANONYMOUS: $DISABLE_ANONYMOUS
            PUBLIC_MAP_STORAGE_URL: "http://map-storage.workadventure.localhost"
            ENABLE_OPENAPI_ENDPOINT: "true"
            START_ROOM_URL: "$START_ROOM_URL"
            # Only used if you set up a JWT authentication mechanism in Ejabberd
            EJABBERD_JWT_SECRET: mySecretJwtToken
            EJABBERD_DOMAIN: ejabberd
            EJABBERD_WS_URI: ws://ejabberd:5443/ws
            ENABLE_CHAT: "$ENABLE_CHAT"
            ENABLE_CHAT_UPLOAD: "$ENABLE_CHAT_UPLOAD"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.front.rule=Host(`front.workadventure.localhost`)"
            - "traefik.http.routers.front.service=front"
            - "traefik.http.services.front.loadbalancer.server.port=8080"
            - "traefik.http.routers.play.rule=Host(`play.workadventure.localhost`)"
            - "traefik.http.routers.play.service=play"
            - "traefik.http.services.play.loadbalancer.server.port=3000"

    chat:
        image: thecodingmachine/nodejs:v2-18-bullseye
        command: yarn run start
        environment:
            STARTUP_COMMAND_2: yarn install
            STARTUP_COMMAND_3: yarn typesafe-i18n
            STARTUP_COMMAND_4: cd ../libs/tailwind && yarn install
            PUSHER_URL: http://play.workadventure.localhost
            UPLOADER_URL: http://uploader.workadventure.localhost
            EMBEDLY_KEY: $EMBEDLY_KEY
            ICON_URL: http://icon.workadventure.localhost
            EJABBERD_DOMAIN: ejabberd
            ENABLE_OPENID: "$OPID_CLIENT_ID"
            ENABLE_CHAT_UPLOAD: "$ENABLE_CHAT_UPLOAD"
        volumes:
            - ./chat:/usr/src/app
            - ./libs:/usr/src/libs
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.chat.rule=Host(`chat.workadventure.localhost`)"
            - "traefik.http.routers.chat.entryPoints=web"
            - "traefik.http.services.chat.loadbalancer.server.port=8080"

    maps:
        image: thecodingmachine/php:8.1-v4-apache-node12
        environment:
            DEBUG_MODE: "$DEBUG_MODE"
            HOST: "0.0.0.0"
            NODE_ENV: development
            FRONT_URL: http://play.workadventure.localhost
            #APACHE_DOCUMENT_ROOT: dist/
            #APACHE_EXTENSIONS: headers
            #APACHE_EXTENSION_HEADERS: 1
            STARTUP_COMMAND_0: sudo a2enmod headers
            STARTUP_COMMAND_1: yarn install
        volumes:
            - ./maps:/var/www/html
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.maps.rule=Host(`maps.workadventure.localhost`)"
            - "traefik.http.routers.maps.entryPoints=web,traefik"
            - "traefik.http.services.maps.loadbalancer.server.port=80"

    back:
        image: thecodingmachine/nodejs:v2-18-bullseye
        command: yarn dev
        #command: yarn run profile
        environment:
            DEBUG: "*"
            # On startup, we ask the messages container to regenerate the files.
            # Note: we need to use this "messages" container because of ARM64 processors that are not supported with protoc (used in "messages" container)
            STARTUP_COMMAND_0: touch /usr/src/app/src/Messages/generate_request/need_regenerate
            STARTUP_COMMAND_1: yarn install
            # wait for files to be generated by "messages" container
            STARTUP_COMMAND_2: while [ -f /usr/src/app/src/Messages/generate_request/need_regenerate ]; do sleep 1; done
            SECRET_KEY: yourSecretKey
            SECRET_JITSI_KEY: "$SECRET_JITSI_KEY"
            ENABLE_FEATURE_MAP_EDITOR: "$ENABLE_FEATURE_MAP_EDITOR"
            ALLOW_ARTILLERY: "true"
            ADMIN_API_TOKEN: "$ADMIN_API_TOKEN"
            JITSI_URL: $JITSI_URL
            JITSI_ISS: $JITSI_ISS
            BBB_URL: $BBB_URL
            BBB_SECRET: $BBB_SECRET
            TURN_STATIC_AUTH_SECRET: SomeStaticAuthSecret
            MAX_PER_GROUP: "MAX_PER_GROUP"
            REDIS_HOST: redis
            NODE_ENV: development
            STORE_VARIABLES_FOR_LOCAL_MAPS: "true"
            PROMETHEUS_AUTHORIZATION_TOKEN: "$PROMETHEUS_AUTHORIZATION_TOKEN"
            MAP_STORAGE_URL: "map-storage:50053"
            PUBLIC_MAP_STORAGE_URL: "http://map-storage.workadventure.localhost"
            PLAYER_VARIABLES_MAX_TTL: $PLAYER_VARIABLES_MAX_TTL
            EJABBERD_API_URI: http://ejabberd:5443/api/
            ENABLE_CHAT: "$ENABLE_CHAT"
            ENABLE_CHAT_UPLOAD: "$ENABLE_CHAT_UPLOAD"
        volumes:
            - ./back:/usr/src/app
        ports:
            - "9232:9229"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.back.rule=Host(`api.workadventure.localhost`)"
            - "traefik.http.routers.back.entryPoints=web"
            - "traefik.http.services.back.loadbalancer.server.port=8080"

    map-storage:
        image: thecodingmachine/nodejs:v2-18-bullseye
        command: yarn start:dev
        #command: yarn run profile
        environment:
            DEBUG: "*"
            STARTUP_COMMAND_1: yarn install
            STARTUP_COMMAND_2: cd ../libs/map-editor && yarn install
            NODE_ENV: development
            PROMETHEUS_AUTHORIZATION_TOKEN: "$PROMETHEUS_AUTHORIZATION_TOKEN"
        volumes:
            - ./map-storage:/usr/src/app
            - ./libs:/usr/src/libs
        ports:
            - "9233:9229"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.map-storage.rule=Host(`map-storage.workadventure.localhost`)"
            - "traefik.http.routers.map-storage.entryPoints=web"
            - "traefik.http.services.map-storage.loadbalancer.server.port=3000"

    uploader:
        image: thecodingmachine/nodejs:v2-18-bullseye
        command: yarn dev
        #command: yarn run profile
        environment:
            DEBUG: "*"
            STARTUP_COMMAND_1: yarn install
            UPLOADER_URL: http://uploader.workadventure.localhost
            #AWS
            AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
            AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
            AWS_DEFAULT_REGION: "$AWS_DEFAULT_REGION"
            AWS_BUCKET: "$AWS_BUCKET"
            AWS_URL: "$AWS_URL"
            AWS_ENDPOINT: "$AWS_ENDPOINT"
            #REDIS
            REDIS_HOST: "$UPLOADER_REDIS_HOST"
            REDIS_PORT: "$UPLOADER_REDIS_PORT"
            REDIS_DB_NUMBER: "$UPLOADER_REDIS_DB_NUMBER"
            ENABLE_CHAT_UPLOAD: "$ENABLE_CHAT_UPLOAD"
            UPLOAD_MAX_FILESIZE: "$UPLOAD_MAX_FILESIZE"
        volumes:
            - ./uploader:/usr/src/app
        ports:
            - "9234:9229"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.uploader.rule=Host(`uploader.workadventure.localhost`)"
            - "traefik.http.routers.uploader.entryPoints=web"
            - "traefik.http.services.uploader.loadbalancer.server.port=8080"

    messages:
        image: thecodingmachine/workadventure-back-base:v1-18
        environment:
            #STARTUP_COMMAND_0: sudo apt-get install -y inotify-tools
            STARTUP_COMMAND_1: yarn install
            STARTUP_COMMAND_2: yarn run proto:watch
        volumes:
            - ./messages:/usr/src/app
            - ./back:/usr/src/back
            - ./play:/usr/src/play
            - ./chat:/usr/src/chat
            - ./map-storage:/usr/src/map-storage

    redis:
        image: redis:6

    redisinsight:
        image: redislabs/redisinsight:latest
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.redisinsight.rule=Host(`redis.workadventure.localhost`)"
            - "traefik.http.routers.redisinsight.entryPoints=web"
            - "traefik.http.services.redisinsight.loadbalancer.server.port=8001"

    icon:
        image: matthiasluedtke/iconserver:v3.13.0
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.icon.rule=Host(`icon.workadventure.localhost`)"
            - "traefik.http.routers.icon.entryPoints=web"
            - "traefik.http.services.icon.loadbalancer.server.port=8080"

    ejabberd:
        image: ghcr.io/processone/ejabberd:22.05
        volumes:
            - ./xmpp/ejabberd.yml:/opt/ejabberd/conf/ejabberd.yml
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.xmpp.rule=Host(`xmpp.workadventure.localhost`)"
            - "traefik.http.routers.xmpp.entryPoints=web"
            - "traefik.http.services.xmpp.loadbalancer.server.port=5380"

    # A mock server to test OpenID connect connectivity
    oidc-server-mock:
        image: ghcr.io/soluto/oidc-server-mock:0.7.0
        environment:
            ASPNETCORE_ENVIRONMENT: Development
            SERVER_OPTIONS_INLINE: |
                {
                  "AccessTokenJwtType": "JWT",
                  "Discovery": {
                    "ShowKeySet": true
                  },
                  "Authentication": {
                    "CookieSameSiteMode": "Lax",
                    "CheckSessionCookieSameSiteMode": "Lax"
                  }
                }
            LOGIN_OPTIONS_INLINE: |
                {
                  "AllowRememberLogin": false
                }
            LOGOUT_OPTIONS_INLINE: |
                {
                  "AutomaticRedirectAfterSignOut": true
                }
            API_SCOPES_INLINE: |
                - Name: some-app-scope-1
                - Name: some-app-scope-2
            API_RESOURCES_INLINE: |
                - Name: some-app
                  Scopes:
                    - some-app-scope-1
                    - some-app-scope-2
            USERS_CONFIGURATION_INLINE: |
                [
                  {
                    "SubjectId":"1",
                    "Username":"User1",
                    "Password":"pwd",
                    "Claims": [
                      {
                        "Type": "name",
                        "Value": "Sam Tailor"
                      },
                      {
                        "Type": "email",
                        "Value": "sam.tailor@gmail.com"
                      },
                      {
                        "Type": "some-api-resource-claim",
                        "Value": "Sam's Api Resource Custom Claim"
                      },
                      {
                        "Type": "some-api-scope-claim",
                        "Value": "Sam's Api Scope Custom Claim"
                      },
                      {
                        "Type": "some-identity-resource-claim",
                        "Value": "Sam's Identity Resource Custom Claim"
                      }
                    ]
                  }
                ]
            CLIENTS_CONFIGURATION_PATH: /tmp/config/clients-config.json
        volumes:
            - ./contrib/oidc-server-mock:/tmp/config:ro
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.oidc.rule=Host(`oidc.workadventure.localhost`)"
            - "traefik.http.routers.oidc.entryPoints=web"
        healthcheck:
            #disable: true
            timeout: 5s

#  coturn:
#    image: coturn/coturn:4.5.2
#    command:
#      - turnserver
#      #- -c=/etc/coturn/turnserver.conf
#      - --log-file=stdout
#      - --external-ip=$$(detect-external-ip)
#      - --listening-port=3478
#      - --min-port=10000
#      - --max-port=10010
#      - --tls-listening-port=5349
#      - --listening-ip=0.0.0.0
#      - --realm=coturn.workadventure.localhost
#      - --server-name=coturn.workadventure.localhost
#      - --lt-cred-mech
#      # Enable Coturn "REST API" to validate temporary passwords.
#      #- --use-auth-secret
#      #- --static-auth-secret=SomeStaticAuthSecret
#      #- --userdb=/var/lib/turn/turndb
#      - --user=workadventure:WorkAdventure123
#      # use real-valid certificate/privatekey files
#      #- --cert=/root/letsencrypt/fullchain.pem
#      #- --pkey=/root/letsencrypt/privkey.pem
#    network_mode: host
