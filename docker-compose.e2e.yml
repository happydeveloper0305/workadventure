version: "3.6"
services:
  # overrides for e2e tests to be closer to production
  # use with command:
  # docker-compose -f docker-compose.yaml -f docker-compose.e2e.yml up -d --build
  reverse-proxy:
    depends_on:
      play:
        condition: service_healthy
      back:
        condition: service_healthy

  play:
    image: ghcr.io/workadventure/play:${DOCKER_TAG:-develop}
    build:
      context: ./
      dockerfile: play/Dockerfile
      cache_from:
        - ghcr.io/workadventure/play:${DOCKER_TAG:-develop}
      args:
        BUILDKIT_INLINE_CACHE: 1
    working_dir: /usr/src/play
    command: npm run start
    volumes: []
    environment:
      ENABLE_OPENAPI_ENDPOINT: "true"
      STARTUP_COMMAND_0: ""
      STARTUP_COMMAND_1: ""
      STARTUP_COMMAND_2: ""
      STARTUP_COMMAND_3: ""
      STARTUP_COMMAND_4: ""
      STARTUP_COMMAND_5: ""

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.play.rule=Host(`play.workadventure.localhost`)"
      - "traefik.http.routers.play.entryPoints=web"
      - "traefik.http.services.play.loadbalancer.server.port=3000"

  chat:
    image: ghcr.io/workadventure/chat:${DOCKER_TAG:-develop}
    build:
      context: ./
      dockerfile: chat/Dockerfile
      cache_from:
        - ghcr.io/workadventure/chat:${DOCKER_TAG:-develop}
      args:
        BUILDKIT_INLINE_CACHE: 1
    command: /start_nginx.sh
    volumes: []
    environment:
      STARTUP_COMMAND_2: ""
      STARTUP_COMMAND_3: ""
      STARTUP_COMMAND_4: ""
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat.rule=Host(`chat.workadventure.localhost`)"
      - "traefik.http.routers.chat.entryPoints=web"
      - "traefik.http.services.chat.loadbalancer.server.port=80"

  back:
    image: ghcr.io/workadventure/back:${DOCKER_TAG:-develop}
    build:
      context: ./
      dockerfile: back/Dockerfile
      cache_from:
        - ghcr.io/workadventure/back:${DOCKER_TAG:-develop}
      args:
        BUILDKIT_INLINE_CACHE: 1
    command: npm run runprod
    working_dir: /usr/src/back
    volumes: []
    environment:
      ENABLE_OPENAPI_ENDPOINT: "false"
      STARTUP_COMMAND_0: ""
      STARTUP_COMMAND_1: ""
      STARTUP_COMMAND_2: ""

  map-storage:
    image: ghcr.io/workadventure/map-storage:${DOCKER_TAG:-develop}
    build:
      context: ./
      dockerfile: map-storage/Dockerfile
      cache_from:
        - ghcr.io/workadventure/map-storage:${DOCKER_TAG:-develop}
      args:
        BUILDKIT_INLINE_CACHE: 1
    working_dir: /usr/src/map-storage
    command: npm run start
    volumes: []
    environment:
      STARTUP_COMMAND_1: ""
      STARTUP_COMMAND_2: ""

  maps:
    image: ghcr.io/workadventure/maps:${DOCKER_TAG:-develop}
    build:
      context: maps/
      cache_from:
        - ghcr.io/workadventure/maps:${DOCKER_TAG:-develop}
      args:
        BUILDKIT_INLINE_CACHE: 1
    volumes: []
    environment:
      STARTUP_COMMAND_0: ""
      STARTUP_COMMAND_1: ""

  uploader:
    image: ghcr.io/workadventure/uploader:${DOCKER_TAG:-develop}
    build:
      context: ./
      dockerfile: uploader/Dockerfile
      cache_from:
        - ghcr.io/workadventure/uploader:${DOCKER_TAG:-develop}
      args:
        BUILDKIT_INLINE_CACHE: 1
    working_dir: /usr/src/uploader
    command: npm run start
    volumes: []
    environment:
      ENABLE_OPENAPI_ENDPOINT: "false"
      STARTUP_COMMAND_1: ""

  ejabberd:
    image: ghcr.io/workadventure/ejabberd:${DOCKER_TAG:-develop}
    build:
      context: ./xmpp
      cache_from:
        - ghcr.io/workadventure/ejabberd:${DOCKER_TAG:-develop}
      args:
        BUILDKIT_INLINE_CACHE: 1
    volumes: []
