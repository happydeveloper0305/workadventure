syntax = "proto3";

import "messages.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";

/**
 * Service handled by the "back". Pusher servers connect to this service.
 */
service RoomManager {
  rpc joinRoom(stream PusherToBackMessage) returns (stream ServerToClientMessage); // Holds a connection between one given client and the back
  rpc listenZone(ZoneMessage) returns (stream BatchToPusherMessage); // Connection used to send to a pusher messages related to a given zone of a given room
  rpc listenRoom(RoomMessage) returns (stream BatchToPusherRoomMessage); // Connection used to send to a pusher messages related to a given room
  rpc adminRoom(stream AdminPusherToBackMessage) returns (stream ServerToAdminClientMessage);
  rpc sendAdminMessage(AdminMessage) returns (google.protobuf.Empty);
  rpc sendGlobalAdminMessage(AdminGlobalMessage) returns (google.protobuf.Empty);
  rpc ban(BanMessage) returns (google.protobuf.Empty);
  rpc sendAdminMessageToRoom(AdminRoomMessage) returns (google.protobuf.Empty);
  rpc sendWorldFullWarningToRoom(WorldFullWarningToRoomMessage) returns (google.protobuf.Empty);
  rpc sendRefreshRoomPrompt(RefreshRoomPromptMessage) returns (google.protobuf.Empty);
  rpc sendChatMessagePrompt(ChatMessagePrompt) returns (google.protobuf.Empty);
  rpc getRooms(google.protobuf.Empty) returns (RoomsList);
  rpc ping(PingMessage) returns (PingMessage);
  rpc readVariable(VariableRequest) returns (google.protobuf.Value);
  rpc listenVariable(VariableRequest) returns (stream google.protobuf.Value);
  rpc saveVariable(SaveVariableRequest) returns (google.protobuf.Empty);
  rpc dispatchEvent(DispatchEventRequest) returns (google.protobuf.Empty); // Dispatch an event to all users in the room
  rpc listenEvent(EventRequest) returns (stream EventResponse); // Listen to events dispatched in the room
  rpc handleMapStorageUploadMapDetected(MapStorageClearAfterUploadMessage) returns (google.protobuf.Empty);
  rpc dispatchGlobalEvent(DispatchGlobalEventRequest) returns (google.protobuf.Empty); // Dispatch a scripting API message to ALL rooms
}

/**
 * Service handled by the "back" about spaces. Pusher servers connect to this service.
 */
service SpaceManager {
  rpc watchSpace(stream PusherToBackSpaceMessage) returns (stream BackToPusherSpaceMessage);
}

/**
 * Service handled by the "map-storage". Back servers connect to this service.
 */
service MapStorage {
  rpc ping(PingMessage) returns (PingMessage);
  rpc handleEditMapCommandWithKeyMessage(EditMapCommandWithKeyMessage) returns (EditMapCommandMessage);
  rpc handleUpdateMapToNewestMessage(UpdateMapToNewestWithKeyMessage) returns (EditMapCommandsArrayMessage);
  rpc handleClearAfterUpload(MapStorageClearAfterUploadMessage) returns (google.protobuf.Empty);
}
