name: Build, push, test and deploy Docker image

on:
  push:
    branches: [master, develop]
  release:
    types: [created]
  pull_request:
    types: [labeled, synchronize, opened, reopened]

jobs:
  build-front:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: thecodingmachine/workadventure-front

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: front/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: thecodingmachine/workadventure-front:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=thecodingmachine/workadventure-front:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

  build-chat:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: thecodingmachine/workadventure-chat

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: front/chat/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: thecodingmachine/workadventure-chat:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=thecodingmachine/workadventure-chat:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

  build-back:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: thecodingmachine/workadventure-back

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: back/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: thecodingmachine/workadventure-back:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=thecodingmachine/workadventure-back:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

  build-pusher:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: thecodingmachine/workadventure-pusher

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: pusher/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: thecodingmachine/workadventure-pusher:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=thecodingmachine/workadventure-pusher:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

  build-uploader:
    runs-on: ubuntu-latest

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: thecodingmachine/workadventure-uploader

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: uploader/Dockerfile
          push: true
          tags: thecodingmachine/workadventure-uploader:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=thecodingmachine/workadventure-uploader:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

  build-maps:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: thecodingmachine/workadventure-maps

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: maps/
          file: maps/Dockerfile
          push: true
          tags: thecodingmachine/workadventure-maps:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=thecodingmachine/workadventure-maps:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

  build-map-storage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: thecodingmachine/workadventure-map-storage

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: map-storage/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: thecodingmachine/workadventure-map-storage:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=thecodingmachine/workadventure-map-storage:${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          cache-to: type=inline
          labels: ${{ steps.meta.outputs.labels }}

  end-to-end-tests:
    name: "End to end tests with ${{ matrix.browser }}"
    strategy:
      fail-fast: false
      matrix:
        browser: [ 'chromium', 'firefox', 'webkit' ]
    needs:
      - build-front
      - build-chat
      - build-back
      - build-pusher
      - build-maps
      - build-uploader
      - build-map-storage
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies
        run: npm ci
        working-directory: tests
      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}
        working-directory: tests
      - name: 'Setup .env file'
        run: cp .env.template .env
#      - name: Wait for front to build
#        uses: lewagon/wait-on-check-action@v1.1.2
#        with:
#          ref: ${{ github.sha }}
#          check-name: 'build-front'
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          wait-interval: 10
#      - name: Wait for pusher to build
#        uses: lewagon/wait-on-check-action@v1.1.2
#        with:
#          ref: ${{ github.sha }}
#          check-name: 'build-pusher'
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          wait-interval: 10
#      - name: Wait for back to build
#        uses: lewagon/wait-on-check-action@v1.1.2
#        with:
#          ref: ${{ github.sha }}
#          check-name: 'build-back'
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          wait-interval: 10
#      - name: Wait for chat to build
#        uses: lewagon/wait-on-check-action@v1.1.2
#        with:
#          ref: ${{ github.sha }}
#          check-name: 'build-chat'
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          wait-interval: 10
#      - name: Wait for map-storage to build
#        uses: lewagon/wait-on-check-action@v1.1.2
#        with:
#          ref: ${{ github.sha }}
#          check-name: 'build-map-storage'
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          wait-interval: 10
      - uses: rlespinasse/github-slug-action@3.1.0
      - name: Display pulled version
        run: echo "Pulling images with tag ${DOCKER_TAG}"
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Download images
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml pull
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Start WorkAdventure
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml up -d
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Wait for environment to Start
        run: sleep 30
      - name: Run Playwright tests
        run: npm run test-prod-like -- --project=${{ matrix.browser }}
        working-directory: tests
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Display docker-compose logs on failure
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml logs
        if: failure()
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Display containers state
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml ps
        if: failure()
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - name: Side-load docker-compose logs in the playwright report
        run: docker-compose -f docker-compose.yaml -f docker-compose-oidc.yaml -f docker-compose.e2e.yml logs > tests/playwright-report/docker-compose.log
        if: failure()
        env:
          DOCKER_TAG: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: tests/playwright-report/
          retention-days: 30

  deeploy:
    needs:
      - build-front
      - build-chat
      - build-back
      - build-pusher
      - build-maps
      - build-uploader
      - build-map-storage
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Create a slugified value of the branch
      - uses: rlespinasse/github-slug-action@3.1.0

      - name: Set ADMIN_URL if "deploy-connect-to-admin" label is set
        run: echo "ADMIN_API_URL=https://${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}.test.workadventu.re" >> $GITHUB_ENV
        if: ${{ (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy-connect-to-admin')) || env.GITHUB_REF_SLUG == 'develop'  }}

      - name: Write certificate
        run: echo "${CERTS_PRIVATE_KEY}" > secret.key && chmod 0600 secret.key
        env:
          CERTS_PRIVATE_KEY: ${{ secrets.CERTS_PRIVATE_KEY }}

      - name: Download certificate
        run: mkdir secrets && scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i secret.key ubuntu@cert.workadventu.re:./config/live/workadventu.re/* secrets/

      - name: Create namespace
        uses: steebchen/kubectl@v1.0.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_FILE_BASE64 }}
        with:
          args: create namespace workadventure-${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
        continue-on-error: true

      - name: Delete old certificates in namespace
        uses: steebchen/kubectl@v1.0.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_FILE_BASE64 }}
        with:
          args: -n workadventure-${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }} delete secret certificate-tls
        continue-on-error: true

      - name: Install certificates in namespace
        uses: steebchen/kubectl@v1.0.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_FILE_BASE64 }}
        with:
          args: -n workadventure-${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }} create secret tls certificate-tls --key="secrets/privkey.pem" --cert="secrets/fullchain.pem"

      - name: Deploy
        uses: thecodingmachine/deeployer-action@master
        env:
          KUBE_CONFIG_FILE: ${{ secrets.KUBE_CONFIG_FILE }}
          ADMIN_API_TOKEN: ${{ secrets.ADMIN_API_TOKEN }}
          ADMIN_SOCKETS_TOKEN: ${{ secrets.ADMIN_SOCKETS_TOKEN }}
          JITSI_ISS: ${{ secrets.JITSI_ISS }}
          JITSI_URL: ${{ secrets.JITSI_URL }}
          SECRET_JITSI_KEY: ${{ secrets.SECRET_JITSI_KEY }}
          TURN_STATIC_AUTH_SECRET: ${{ secrets.TURN_STATIC_AUTH_SECRET }}
          DEPLOY_REF: ${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_URL: ${{ secrets.POSTHOG_URL }}
        with:
          namespace: workadventure-${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }}

      - name: Add a comment in PR
        uses: unsplash/comment-on-pr@master
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: "Environment deployed at https://play-${{ env.GITHUB_HEAD_REF_SLUG }}.test.workadventu.re \nTests available at https://maps-${{ env.GITHUB_HEAD_REF_SLUG }}.test.workadventu.re/tests"
